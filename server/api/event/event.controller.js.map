{"version":3,"sources":["api/event/event.controller.js"],"names":["index","show","isRegistered","create","getRegisteredUsers","convertToExcel","upsert","update","register","patch","destroy","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","apply","err","reject","save","removeEntity","remove","then","end","handleEntityNotFound","handleError","console","log","send","req","find","exec","catch","params","id","isMongoId","findById","event","registered","user","equals","_id","body","eventCategory","events","push","i","length","$in","users","model","data","mongoData2Xlsx","fullPath","findOneAndUpdate","new","setDefaultsOnInsert","runValidators","name","info","faq","rules","awards","date","Date","startTime","endTime","venue","poster","contact","problemStatement","paylink"],"mappings":"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","file":"api/event/event.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/events              ->  index\n * POST    /api/events              ->  create\n * GET     /api/events/:id          ->  show\n * PUT     /api/events/:id          ->  upsert\n * PATCH   /api/events/:id          ->  patch\n * DELETE  /api/events/:id          ->  destroy\n */\n\n'use strict';\n\nimport jsonpatch from 'fast-json-patch';\nimport validator from 'validator';\nimport mongoXlsx from 'mongo-xlsx';\nimport Event from './event.model';\nimport User from '../user/user.model';\nimport EventCategory from '../eventCategory/eventCategory.model';\nimport path from 'path';\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if(entity) {\n      return res.status(statusCode).json(entity);\n    }\n    return null;\n  };\n}\n\nfunction patchUpdates(patches) {\n  return function(entity) {\n    try {\n      jsonpatch.apply(entity, patches, /*validate*/ true);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return entity.save();\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if(entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if(!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    console.log(err);\n    res.status(statusCode).send(err);\n  };\n}\n\n// Gets a list of Events\nexport function index(req, res) {\n  return Event.find().exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a single Event from the DB\nexport function show(req, res) {\n  console.log(req.params.id);\n \n  if(!validator.isMongoId(req.params.id+''))\n    return res.status(400).send(\"Invalid Id\");\n\n  return Event.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a single Event from the DB\nexport function isRegistered(req, res) {\n  \n  if(!validator.isMongoId(req.params.id+''))\n    return res.status(400).send(\"Invalid Id\");\n\n  return Event.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(event => {\n      var isRegistered = false;\n      isRegistered = event.registered.find(function(user){\n        if(user.user.equals(req.user._id))\n          return true;\n        return false;\n      })\n      return res.json(isRegistered);\n    })\n    .catch(handleError(res));\n}\n\n// Creates a new Event in the DB\nexport function create(req, res) {\n  console.log(req.body);\n  return Event.create(req.body)\n    .then(event=>{\n      EventCategory.findById(event.eventCategory)\n      .exec()\n      .then(handleEntityNotFound(res))\n      .then(eventCategory=>{\n        console.log(eventCategory);\n        eventCategory.events.push({event:event._id});\n        eventCategory.save()\n        .then(respondWithResult(res, 201))\n        .catch(handleError(res));\n      })\n      .catch(handleError(res));\n    })\n    .catch(handleError(res));\n}\n\n// Gets all registered users for an Event in the DB\nexport function getRegisteredUsers(req, res) {\n  return Event.findById(req.params.id)\n    .then(event=>{\n      var registered = []\n      \n      for (var i = 0; i < event.registered.length; ++i) \n          registered.push(event.registered[i].user+'')\n\n      User.find({_id:{$in:registered}},'name email college phoneNumber')\n      .exec()\n      .then(handleEntityNotFound(res))\n      .then(users=>{\n        console.log(users.length, 55555555);\n        return res.status(201).send(users)  \n      \n      })\n      .catch(handleError(res));\n    })\n    .catch(handleError(res));\n}\n// Exports list of registered users of an event\nexport function convertToExcel(req, res) {\n  if(!validator.isMongoId(req.params.id+''))\n    return res.status(400).send(\"Invalid Id\");\n  var model=[\n  {\n    \"displayName\": \"Name\",\n    \"access\": \"name\",\n    \"type\": \"string\"\n  },\n  {\n    \"displayName\": \"Email address\",\n    \"access\": \"email\",\n    \"type\": \"string\"\n  },\n  {\n    \"displayName\": \"College name\",\n    \"access\": \"college\",\n    \"type\": \"string\"\n  },]\n\n\n  return Event.findById(req.params.id).exec()\n    .then(event=>{\n      var data = req.body;\n\n      // Generate Excel \n      mongoXlsx.mongoData2Xlsx(data, model, function(err, data) {\n        console.log('File saved at:', data.fullPath);\n\n        // return res.status(201).send(data)\n        return res.json(data.fullPath);\n      })\n    })\n    .catch(handleError(res));\n}\n// Upserts the given Event in the DB at the specified ID\nexport function upsert(req, res) {\n  if(req.body._id) {\n    delete req.body._id;\n  }\n  console.log(req.body);\n  return Event.findOneAndUpdate(req.params.id, req.body, {upsert: true, new:true, setDefaultsOnInsert: true, runValidators: true}).exec()\n\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\nexport function update(req, res) {\n  if(req.body._id) {\n    delete req.body._id;\n  }\n  if(!validator.isMongoId(req.params.id+''))\n    return res.status(400).send(\"Invalid Id\");\n\n  return Event.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(event=>{\n    event.name=req.body.name;\n    event.info=req.body.info;\n    event.faq=req.body.faq;\n    event.rules=req.body.rules;\n    event.awards=req.body.awards;\n    event.date=new Date(req.body.date)\n    event.startTime=new Date(req.body.startTime)\n    event.endTime=new Date(req.body.endTime);\n    event.venue=req.body.venue;\n    event.poster=req.body.poster;\n    event.contact=req.body.contact;\n    event.problemStatement=req.body.problemStatement;\n    event.paylink=req.body.paylink;\n    event.save()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n    })\n    .catch(handleError(res));\n}\n\nexport function register (req, res){\n  if(!validator.isMongoId(req.params.id+''))\n    return res.status(400).send(\"Invalid Id\");\n  \n  return Event.findById(req.params.id)\n  .exec()\n  .then( event =>{\n    var isRegistered = false;\n    for(var i=0;i<event.registered.length;++i)\n      if(event.registered[i].user.equals(req.user._id))\n      {\n        isRegistered = true;\n        console.log('already registered');\n        break;\n      }\n\n    if(!isRegistered)\n      event.registered.push({user:req.user._id});\n    \n    event.save()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n  })\n  .catch(handleError(res));\n}\n// Updates an existing Event in the DB\nexport function patch(req, res) {\n  if(req.body._id) {\n    delete req.body._id;\n  }\n  return Event.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(patchUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a Event from the DB\nexport function destroy(req, res) {\n  return Event.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n"],"sourceRoot":"/source/"}